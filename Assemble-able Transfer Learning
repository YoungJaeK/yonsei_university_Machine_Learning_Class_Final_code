{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import torch\n",
    "import torchvision\n",
    "\n",
    "os.environ['CUDA_VISIBLE_DEVICES']='5'\n",
    "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "from torch import nn, optim\n",
    "from torch.nn import functional as F\n",
    "from torch.autograd import Variable\n",
    "\n",
    "from torchvision import models, datasets, transforms\n",
    "\n",
    "import json\n",
    "import datetime\n",
    "import statistics\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Set Global Parameter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# make a parameter\n",
    "NAME_OF_CLASS = ['normal','lgd','hgd','cancer'] # This name same with name of file\n",
    "JSON_PATH = '/disk1/yjkim/json/intestine/c4json'\n",
    "SAVE_ROOT_PATH = '/disk1/yjkim/jupyter/weight/intestine/hdcnn/dens161/2_last2_5-12/'\n",
    "\n",
    "BATCH_SIZE = 40\n",
    "WORKERS = 2\n",
    "IMG_SIZE = 224"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Dataset and DataLoader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Type: Image\n",
      "Data Type: Image\n",
      "Data Type: Image\n"
     ]
    }
   ],
   "source": [
    "# dataset\n",
    "train_dataset = EndoDataset(DATA_PATH=JSON_PATH,IMAGE_SIZE = IMG_SIZE, split='train')\n",
    "val_dataset = EndoDataset(DATA_PATH=JSON_PATH,IMAGE_SIZE = IMG_SIZE, split='val')\n",
    "test_dataset = EndoDataset(DATA_PATH=JSON_PATH,IMAGE_SIZE = IMG_SIZE, split='test')\n",
    "\n",
    "# dataloader\n",
    "train_loader = torch.utils.data.DataLoader(dataset = train_dataset, batch_size = BATCH_SIZE, shuffle = True, \n",
    "                                           num_workers = WORKERS, pin_memory = True)\n",
    "\n",
    "val_loader = torch.utils.data.DataLoader(dataset = val_dataset, batch_size = BATCH_SIZE, shuffle = True, \n",
    "                                           num_workers = WORKERS, pin_memory = True)\n",
    "\n",
    "test_loader = torch.utils.data.DataLoader(dataset = test_dataset, batch_size = BATCH_SIZE, shuffle = True, \n",
    "                                           num_workers = WORKERS, pin_memory = True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Model Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.nn.functional as F\n",
    "\n",
    "class DensNet161Bottom(nn.Module):\n",
    "    def __init__(self, front_model, rear_model):\n",
    "        super(DensNet161Bottom, self).__init__()\n",
    "        front_layer = list(list(front_model.children())[0][:5]) # 7:D,T\n",
    "        rear_layer = list(list(rear_model.children())[0][5:12])\n",
    "        total_layer = front_layer + rear_layer + [nn.Linear(in_features=2208, out_features=4, bias=True)]\n",
    "        \n",
    "        self.features = nn.Sequential(*total_layer)\n",
    "        \n",
    "        del front_layer, rear_layer, total_layer\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x = self.features[0](x) # Conv2d\n",
    "        x = self.features[1](x) # batchNorm2d\n",
    "        x = self.features[2](x) # ReLu\n",
    "        x = self.features[3](x) # maxPool2d\n",
    "        x = self.features[4](x) # _DenseBlock 1\n",
    "        \n",
    "        x = self.features[5](x) # _Transition 1\n",
    "        x = self.features[6](x) # _DenseBlock 2 \n",
    "        x = self.features[7](x) # _Transition 2\n",
    "        x = self.features[8](x) # _DenseBlock 3 \n",
    "        x = self.features[9](x) # _Transition 3\n",
    "        x = self.features[10](x)# _DensBlock 4\n",
    "        x = self.features[11](x)# batch normalize\n",
    "        \n",
    "        x = F.relu(x, inplace=True)\n",
    "        x = F.avg_pool2d(x, kernel_size=7).view(x.size(0), -1)\n",
    "        \n",
    "        x = self.features[12](x) # classifier\n",
    "        \n",
    "        return x\n",
    "    \n",
    "# x = self.features(x)\n",
    "# x = F.relu(x, inplace=True)\n",
    "# x = F.avg_pool2d(x, kernel_size=7).view(x.size(0), -1)\n",
    "# x = self.classifier(x)\n",
    "\n",
    "# x = nn.ReLU(inplace=True)(x)\n",
    "# x = F.avg_pool2d(x, 8)\n",
    "# x = x.view(-1,4)\n",
    "    \n",
    "# f = self.features(x)\n",
    "# f = F.relu(f, inplace=True)\n",
    "# f = F.avg_pool2d(f, kernel_size=7).view(f.size(0), -1)\n",
    "# y = self.classifier(f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "MODEL_ROOT_PATH = '/disk1/yjkim/jupyter/weight/intestine'\n",
    "MODEL_PATH = 'dens161'\n",
    "CLASS_PATH = 'c2'\n",
    "PT_PATH = '99.06_5.pt'\n",
    "FRONT_PATH = os.path.join(MODEL_ROOT_PATH,MODEL_PATH,CLASS_PATH,PT_PATH)\n",
    "front_model = torch.load(FRONT_PATH)\n",
    "\n",
    "MODEL_PATH = 'dens161'\n",
    "CLASS_PATH = 'lastc2'\n",
    "PT_PATH = '85.77_6.pt'\n",
    "REAR_PATH = os.path.join(MODEL_ROOT_PATH,MODEL_PATH,CLASS_PATH,PT_PATH)\n",
    "rear_model = torch.load(REAR_PATH)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = DensNet161Bottom(front_model,rear_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Conv2d\n",
      "BatchNorm2d\n",
      "ReLU\n",
      "MaxPool2d\n",
      "_DenseBlock\n",
      "_Transition\n",
      "_DenseBlock\n",
      "_Transition\n",
      "_DenseBlock\n",
      "_Transition\n",
      "_DenseBlock\n",
      "BatchNorm2d\n",
      "Linear\n"
     ]
    }
   ],
   "source": [
    "for child in list(model.children())[0]:\n",
    "    print(child.__class__.__name__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # setting\n",
    "# optimizer = optim.Adam(model.parameters(),lr = 0.000001)\n",
    "# loss_func = nn.CrossEntropyLoss()\n",
    "# # test \n",
    "# test_hdcnn_model = Evaluation(NAME_OF_CLASS,device)\n",
    "# model.eval()\n",
    "# model.to(device)\n",
    "# test_hdcnn_model.test(model, loss_func, test_loader)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "eval_model = Evaluation(NAME_OF_CLASS,device)\n",
    "# setting\n",
    "optimizer = optim.Adam(model.parameters(),lr = 0.000001)\n",
    "loss_func = nn.CrossEntropyLoss()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 91\n",
      "Train set: Loss: 0.282925  Accuracy: 1915/1922 Total_ACC: (99.64%)\n",
      "train_time: 0:01:16.429424\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.97  | 0.94 | 0.69 |  0.74  |   0.010661   |      83.52       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:19.908511\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/yjkim/miniconda3/envs/yj/lib/python3.6/site-packages/torch/serialization.py:251: UserWarning: Couldn't retrieve source code for container of type DensNet161Bottom. It won't be checked for correctness upon loading.\n",
      "  \"type \" + obj.__name__ + \". It won't be checked \"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 92\n",
      "Train set: Loss: 0.537308  Accuracy: 1911/1922 Total_ACC: (99.43%)\n",
      "train_time: 0:01:17.278475\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.97  | 0.92 | 0.62 |  0.78  |   0.010344   |      82.41       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:19.622502\n",
      "Epoch: 93\n",
      "Train set: Loss: 0.218671  Accuracy: 1916/1922 Total_ACC: (99.69%)\n",
      "train_time: 0:01:14.816898\n",
      "Test set\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "|  0.96  | 0.91 | 0.7 |  0.75  |   0.010441   |      83.05       |\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "test_time: 0:00:19.211884\n",
      "Epoch: 94\n",
      "Train set: Loss: 0.230098  Accuracy: 1916/1922 Total_ACC: (99.69%)\n",
      "train_time: 0:01:16.128452\n",
      "Test set\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "|  0.97  | 0.91 | 0.7 |  0.75  |   0.010379   |      83.36       |\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "test_time: 0:00:19.563114\n",
      "Epoch: 95\n",
      "Train set: Loss: 0.236382  Accuracy: 1914/1922 Total_ACC: (99.58%)\n",
      "train_time: 0:01:16.928785\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.96  | 0.89 | 0.69 |  0.77  |   0.011005   |      82.57       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:18.886507\n",
      "Epoch: 96\n",
      "Train set: Loss: 1.481684  Accuracy: 1909/1922 Total_ACC: (99.32%)\n",
      "train_time: 0:01:14.983280\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.96  | 0.92 | 0.68 |  0.77  |   0.010655   |      83.04       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:18.951780\n",
      "Epoch: 97\n",
      "Train set: Loss: 1.740368  Accuracy: 1917/1922 Total_ACC: (99.74%)\n",
      "train_time: 0:01:17.774178\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.96  | 0.93 | 0.66 |  0.79  |   0.010582   |       83.5       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:19.435870\n",
      "Epoch: 98\n",
      "Train set: Loss: 0.091299  Accuracy: 1916/1922 Total_ACC: (99.69%)\n",
      "train_time: 0:01:14.894529\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.97  | 0.89 | 0.69 |  0.77  |   0.010368   |      83.04       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:19.055296\n",
      "Epoch: 99\n",
      "Train set: Loss: 2.294074  Accuracy: 1913/1922 Total_ACC: (99.53%)\n",
      "train_time: 0:01:15.442592\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.97  | 0.93 | 0.68 |  0.75  |   0.010276   |       83.2       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:19.140868\n",
      "Epoch: 100\n",
      "Train set: Loss: 0.148869  Accuracy: 1916/1922 Total_ACC: (99.69%)\n",
      "train_time: 0:01:16.763691\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.96  | 0.91 | 0.65 |  0.78  |   0.010664   |      82.57       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:18.618867\n",
      "Epoch: 101\n",
      "Train set: Loss: 1.565490  Accuracy: 1915/1922 Total_ACC: (99.64%)\n",
      "train_time: 0:01:18.830420\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.96  | 0.93 | 0.65 |  0.77  |   0.010527   |      82.73       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:19.300539\n",
      "Epoch: 102\n",
      "Train set: Loss: 1.286621  Accuracy: 1913/1922 Total_ACC: (99.53%)\n",
      "train_time: 0:01:16.035699\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.99  | 0.92 | 0.64 |  0.79  |   0.010349   |      83.35       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:18.918331\n",
      "Epoch: 103\n",
      "Train set: Loss: 0.424551  Accuracy: 1916/1922 Total_ACC: (99.69%)\n",
      "train_time: 0:01:15.135094\n",
      "Test set\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "|  0.97  | 0.93 | 0.6 |  0.75  |   0.010898   |      81.48       |\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "test_time: 0:00:20.015565\n",
      "Epoch: 104\n",
      "Train set: Loss: 0.351154  Accuracy: 1916/1922 Total_ACC: (99.69%)\n",
      "train_time: 0:01:17.060192\n",
      "Test set\n",
      "+--------+-----+------+--------+--------------+------------------+\n",
      "| normal | lgd | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+-----+------+--------+--------------+------------------+\n",
      "|  0.99  | 0.9 | 0.68 |  0.75  |   0.011738   |      82.89       |\n",
      "+--------+-----+------+--------+--------------+------------------+\n",
      "test_time: 0:00:18.530389\n",
      "Epoch: 105\n",
      "Train set: Loss: 0.627165  Accuracy: 1914/1922 Total_ACC: (99.58%)\n",
      "train_time: 0:01:15.980149\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.99  | 0.93 | 0.64 |  0.77  |   0.012039   |      82.89       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:18.849528\n",
      "Epoch: 106\n",
      "Train set: Loss: 0.205007  Accuracy: 1919/1922 Total_ACC: (99.84%)\n",
      "train_time: 0:01:15.702172\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.96  | 0.93 | 0.69 |  0.77  |   0.01064    |      83.51       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:20.020550\n",
      "Epoch: 107\n",
      "Train set: Loss: 0.162534  Accuracy: 1920/1922 Total_ACC: (99.90%)\n",
      "train_time: 0:01:15.888602\n",
      "Test set\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "|  0.97  | 0.93 | 0.7 |  0.77  |   0.010597   |      84.14       |\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "test_time: 0:00:19.009113\n",
      "Epoch: 108\n",
      "Train set: Loss: 0.369024  Accuracy: 1917/1922 Total_ACC: (99.74%)\n",
      "train_time: 0:01:17.592009\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.97  | 0.93 | 0.66 |  0.75  |   0.010486   |      83.05       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:18.968396\n",
      "Epoch: 109\n",
      "Train set: Loss: 2.197953  Accuracy: 1916/1922 Total_ACC: (99.69%)\n",
      "train_time: 0:01:15.655588\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "|  0.98  | 0.93 | 0.7 |  0.74  |   0.010578   |      83.67       |\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "test_time: 0:00:18.716224\n",
      "Epoch: 110\n",
      "Train set: Loss: 0.522825  Accuracy: 1915/1922 Total_ACC: (99.64%)\n",
      "train_time: 0:01:17.004461\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.99  | 0.93 | 0.65 |  0.77  |   0.010852   |       83.2       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:19.605447\n",
      "Epoch: 111\n",
      "Train set: Loss: 0.076335  Accuracy: 1919/1922 Total_ACC: (99.84%)\n",
      "train_time: 0:01:15.433663\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.97  | 0.89 | 0.69 |  0.77  |   0.010585   |      83.04       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:19.051111\n",
      "Epoch: 112\n",
      "Train set: Loss: 0.092044  Accuracy: 1916/1922 Total_ACC: (99.69%)\n",
      "train_time: 0:01:17.904789\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.96  | 0.91 | 0.65 |  0.79  |   0.010755   |      82.88       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:19.081661\n",
      "Epoch: 113\n",
      "Train set: Loss: 0.154332  Accuracy: 1915/1922 Total_ACC: (99.64%)\n",
      "train_time: 0:01:17.382708\n",
      "Test set\n",
      "+--------+-----+------+--------+--------------+------------------+\n",
      "| normal | lgd | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+-----+------+--------+--------------+------------------+\n",
      "|  0.97  | 0.9 | 0.68 |  0.77  |   0.010672   |      82.89       |\n",
      "+--------+-----+------+--------+--------------+------------------+\n",
      "test_time: 0:00:18.703976\n",
      "Epoch: 114\n",
      "Train set: Loss: 2.388664  Accuracy: 1913/1922 Total_ACC: (99.53%)\n",
      "train_time: 0:01:13.416474\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.99  | 0.88 | 0.61 |  0.78  |   0.01096    |      81.32       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:18.421130\n",
      "Epoch: 115\n",
      "Train set: Loss: 0.327536  Accuracy: 1919/1922 Total_ACC: (99.84%)\n",
      "train_time: 0:01:17.074860\n",
      "Test set\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "|  0.97  | 0.93 | 0.7 |  0.73  |   0.010683   |      83.21       |\n",
      "+--------+------+-----+--------+--------------+------------------+\n",
      "test_time: 0:00:19.106335\n",
      "Epoch: 116\n",
      "Train set: Loss: 1.957398  Accuracy: 1914/1922 Total_ACC: (99.58%)\n",
      "train_time: 0:01:15.141676\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.97  | 0.91 | 0.69 |  0.77  |   0.012252   |      83.35       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:19.196399\n",
      "Epoch: 117\n",
      "Train set: Loss: 1.660822  Accuracy: 1914/1922 Total_ACC: (99.58%)\n",
      "train_time: 0:01:17.522841\n",
      "Test set\n",
      "+--------+-----+------+--------+--------------+------------------+\n",
      "| normal | lgd | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+-----+------+--------+--------------+------------------+\n",
      "|  0.98  | 0.9 | 0.68 |  0.77  |   0.010649   |      83.04       |\n",
      "+--------+-----+------+--------+--------------+------------------+\n",
      "test_time: 0:00:18.778656\n",
      "Epoch: 118\n",
      "Train set: Loss: 0.267162  Accuracy: 1920/1922 Total_ACC: (99.90%)\n",
      "train_time: 0:01:14.480995\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.96  | 0.93 | 0.68 |  0.75  |   0.010795   |      83.05       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:18.860636\n",
      "Epoch: 119\n",
      "Train set: Loss: 0.176834  Accuracy: 1916/1922 Total_ACC: (99.69%)\n",
      "train_time: 0:01:08.422308\n",
      "Test set\n",
      "+--------+-----+------+--------+--------------+------------------+\n",
      "| normal | lgd | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+-----+------+--------+--------------+------------------+\n",
      "|  0.97  | 0.9 | 0.64 |  0.78  |   0.010855   |      82.26       |\n",
      "+--------+-----+------+--------+--------------+------------------+\n",
      "test_time: 0:00:15.211538\n",
      "Epoch: 120\n",
      "Train set: Loss: 0.360395  Accuracy: 1916/1922 Total_ACC: (99.69%)\n",
      "train_time: 0:01:01.631898\n",
      "Test set\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "| normal | lgd  | hgd  | cancer | Average loss | Average Accuracy |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "|  0.97  | 0.92 | 0.71 |  0.74  |   0.010926   |      83.67       |\n",
      "+--------+------+------+--------+--------------+------------------+\n",
      "test_time: 0:00:15.507878\n"
     ]
    }
   ],
   "source": [
    "# train and test\n",
    "EPOCHS = 30\n",
    "for epoch in range(91, EPOCHS+91):\n",
    "    print(\"Epoch:\",epoch)\n",
    "    start = datetime.datetime.now( )\n",
    "    eval_model.train(model,optimizer, loss_func, train_loader)\n",
    "    \n",
    "    mid = datetime.datetime.now( )\n",
    "    print('train_time:',mid-start)\n",
    "    eval_model.test(model, loss_func, val_loader)\n",
    "    \n",
    "    finish = datetime.datetime.now( )\n",
    "    print('test_time:',finish - mid)\n",
    "    \n",
    "    torch.save(model,SAVE_ROOT_PATH+str(\n",
    "        float(\"{0:.2f}\".format(eval_model.result[\"test_accuracyes\"][-1])))+'_'+str(epoch)+'.pt')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "show loss\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "show acc\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "show class acc\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "eval_model.show_loss()# loss\n",
    "eval_model.show_acc() # acc\n",
    "eval_model.show_class_acc()# each class acc\n",
    "# confusion matrix by test dataset\n",
    "# net1_matrix_test(resnet_model_net1,loss_func,test_loader)\n",
    "# showresult.plot_confusion_matrix(NAME_OF_CLASS,label=result[\"net1_matrix_label\"], predic=result[\"net1_matrix_y_pred\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas import DataFrame\n",
    "\n",
    "class_acc = dict()\n",
    "COL_NAME = list(eval_model.result[\"test_class_acc\"][0].keys())\n",
    "for name in COL_NAME:\n",
    "    class_acc[name] = []\n",
    "\n",
    "class_acc_result = []\n",
    "\n",
    "for dic in eval_model.result[\"test_class_acc\"]:\n",
    "    # dictionary for each epoch\n",
    "    for name in COL_NAME:\n",
    "        class_acc[name].append(dic[name])\n",
    "\n",
    "# class accuracy\n",
    "data_list = []\n",
    "for name in COL_NAME:\n",
    "    data_list.append(class_acc[name])\n",
    "\n",
    "df = DataFrame.from_dict({COL_NAME[0]:data_list[0],\n",
    "                          COL_NAME[1]:data_list[1],\n",
    "                          COL_NAME[2]:data_list[2],\n",
    "                          COL_NAME[3]:data_list[3],\n",
    "                          COL_NAME[4]:data_list[4]})\n",
    "df.to_csv(SAVE_ROOT_PATH + '2_last2_5-12.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from yjlib.ShowResult import ShowResult\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from prettytable import PrettyTable\n",
    "\n",
    "class Evaluation():\n",
    "    \"\"\"Evaluation model\n",
    "    \n",
    "    init\n",
    "    ----\n",
    "    result dictionary\n",
    "        train loss and acc\n",
    "        test loss, acc, and classes add\n",
    "    \n",
    "    Methods\n",
    "    -------\n",
    "    train:\n",
    "    test:\n",
    "    reset_result:\n",
    "    save_result:\n",
    "    show_loss:\n",
    "    show_acc:\n",
    "    show_class_acc:\n",
    "    show_confusion_matrix:\n",
    "    show_roc:\n",
    "    show_heatmap:\n",
    "    \n",
    "    \n",
    "    \"\"\"\n",
    "    def __init__(self, NAME_OF_CLASS, device):\n",
    "        self.result = dict()\n",
    "        self.result[\"train_losses\"] = []\n",
    "        self.result[\"train_accuracyes\"] = []\n",
    "        \n",
    "        self.result[\"test_losses\"] = []\n",
    "        self.result[\"test_accuracyes\"] = []\n",
    "        self.result[\"test_class_acc\"] = []\n",
    "        \n",
    "        \n",
    "        self.result[\"test_label\"] = []\n",
    "        self.result[\"test_y_pred\"] = []\n",
    "        \n",
    "        self.device = device\n",
    "        self.showresult = ShowResult()\n",
    "        self.NAME_OF_CLASS = NAME_OF_CLASS\n",
    "        \n",
    "    # import tqdm\n",
    "    def train(self, model, optimizer,loss_func, data_loader, parallel_device_ids=[]):\n",
    "        \"\"\"Train for classification\n",
    "\n",
    "        Parameter\n",
    "        ---------\n",
    "        model: model\n",
    "        optimizer: optimizer\n",
    "        loss_func: loss_function\n",
    "        data_loader: data_loader\n",
    "        parallel_device_ids: [] Parallel device ids\n",
    "\n",
    "        \"\"\"\n",
    "\n",
    "        if len(parallel_device_ids) > 0 and torch.cuda.device_count() >= len(parallel_device_ids): \n",
    "            model = torch.nn.DataParallel(model)\n",
    "        elif torch.cuda.device_count() < len(parallel_device_ids): \n",
    "            print(\"ERROR: cuda.device < len(device_ids)\")\n",
    "\n",
    "        model.train()\n",
    "        model.to(self.device)\n",
    "\n",
    "        correct = 0\n",
    "\n",
    "        for batch_idx, (data, label) in enumerate(data_loader):\n",
    "            data, label = data.to(self.device), label.to(self.device)\n",
    "            data, label = Variable(data), Variable(label.long())\n",
    "\n",
    "            # zero the parameter gradients\n",
    "            optimizer.zero_grad() \n",
    "\n",
    "            # forward + backward + optimize\n",
    "            output = model(data)\n",
    "    #         _, output_index = torch.max(output,1)# output: [0,1,0,...], output_index: 1\n",
    "            output = output.type(torch.FloatTensor)\n",
    "            label = label.type(torch.LongTensor)\n",
    "            label = label.view(-1)\n",
    "\n",
    "            loss = loss_func(output, label)\n",
    "            \"\"\"\n",
    "            Input: (N,C) where C = number of classes\n",
    "            Target: (N) where each value is 0 <= targets[i] <= C-1\n",
    "            Output: scalar. If reduce is False, then (N) instead.\n",
    "            \"\"\"\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            pred = output.max(1)[1] # get the index of the max log-probability\n",
    "            correct += list(torch.eq(pred,label)).count(1)\n",
    "\n",
    "        self.result[\"train_losses\"].append(loss.item())\n",
    "        self.result[\"train_accuracyes\"].append(100. * correct / len(data_loader.dataset))\n",
    "        print('Train set: Loss: {:.6f}  Accuracy: {}/{} Total_ACC: ({:.2f}%)'.format(\n",
    "            loss.item(),\n",
    "            correct,\n",
    "            len(data_loader.dataset),\n",
    "            100. * correct / len(data_loader.dataset)))\n",
    "    \n",
    "    # 2 classes\n",
    "    def test(self, model, loss_func, test_loader):\n",
    "        \"\"\"Classification test\n",
    "\n",
    "        Parameter\n",
    "        ---------\n",
    "\n",
    "\n",
    "        \"\"\"\n",
    "        model.eval()\n",
    "        model.to(self.device)\n",
    "        test_loss = 0\n",
    "        correct = 0\n",
    "\n",
    "        total_sample_counter = [0]* len(self.NAME_OF_CLASS)# 각 클래스별 sample 수를 counting\n",
    "        classes_correct_samples = [0]* len(self.NAME_OF_CLASS) # 각 클래별 맞는 sample 수\n",
    "\n",
    "        self.result[\"test_label\"] = torch.Tensor([]).type(torch.LongTensor) # dtype: torch.int64\n",
    "        self.result[\"test_y_pred\"] = torch.Tensor([]).type(torch.LongTensor) # dtype: torch.int64\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            for idx,(data, label) in enumerate(test_loader):\n",
    "                data, label = data.to(self.device), label.to(self.device)\n",
    "                data, label = Variable(data), Variable(label.long())\n",
    "                output = model(data)\n",
    "                output = output.type(torch.FloatTensor)\n",
    "\n",
    "                label = label.type(torch.LongTensor)\n",
    "                label = label.view(-1) # dtype: torch.int64\n",
    "\n",
    "                test_loss += loss_func(output, label).item() # sum up batch loss\n",
    "\n",
    "                pred = output.max(1)[1] # get the index of the max log-probability # dtype: torch.int64\n",
    "\n",
    "                # 각 클래스별 데이터 총량 계산\n",
    "                for i in range(len(self.NAME_OF_CLASS)):\n",
    "                    total_sample_counter[i] += list(label).count(i)\n",
    "\n",
    "                # 맞는 전체 데이터 수 count\n",
    "                correct += list(torch.eq(pred,label)).count(1)\n",
    "                \n",
    "                self.result[\"test_label\"] = torch.cat((self.result[\"test_label\"], label), 0)\n",
    "                self.result[\"test_y_pred\"] = torch.cat((self.result[\"test_y_pred\"], pred), 0)\n",
    "\n",
    "                # 각 클래스별로 맞는 갯수\n",
    "                correct_indice = torch.eq(pred, label).nonzero().view(-1)\n",
    "                for i in range(len(self.NAME_OF_CLASS)):\n",
    "                    classes_correct_samples[i] += list(label[correct_indice]).count(i)\n",
    "\n",
    "        \n",
    "        \n",
    "        acc_dict = dict()\n",
    "        show_contents = []\n",
    "        # counting number of correct for each classes\n",
    "        for idx, name in enumerate(self.NAME_OF_CLASS):\n",
    "            acc_dict[name] = classes_correct_samples[idx]/total_sample_counter[idx]\n",
    "            show_contents.append(float(\"{0:.2f}\".format(classes_correct_samples[idx]/total_sample_counter[idx])))\n",
    "\n",
    "            \n",
    "        # evaluation number\n",
    "        acc_dict['average_acc'] = statistics.mean(acc_dict.values())\n",
    "#         acc_dict['precision'] =  # precision 삽입\n",
    "#         acc_dict['F-maeasure'] = # Multi class F-maeasure 삽입 예정 \n",
    "\n",
    "        self.result[\"test_class_acc\"].append(acc_dict)\n",
    "\n",
    "        test_loss /= len(test_loader.dataset)\n",
    "\n",
    "        self.result[\"test_losses\"].append(test_loss)\n",
    "        self.result[\"test_accuracyes\"].append(100. * acc_dict[\"average_acc\"])\n",
    "\n",
    "        show_title =  self.NAME_OF_CLASS + ['Average loss','Average Accuracy']\n",
    "        show_contents += [float(\"{0:.6f}\".format(test_loss)),\n",
    "                              float(\"{0:.2f}\".format(100. * acc_dict[\"average_acc\"]))]\n",
    "        self.__print_result(show_title,show_contents)\n",
    "                                 \n",
    "        del show_contents, show_title\n",
    "        \n",
    "    def __print_result(self, title=[],contents=[]):\n",
    "        print(\"Test set\")\n",
    "        assert len(title) == len(contents)\n",
    "                                 \n",
    "        # 클래스 별로 결과값 별로 pretty table 을 show\n",
    "        info_table = PrettyTable(title)\n",
    "        info_table.add_row(contents)\n",
    "        \n",
    "        print(info_table)\n",
    "\n",
    "    def reset_result(self):\n",
    "        \"\"\"Reset result\n",
    "        reset the result dictionary\n",
    "        \"\"\"\n",
    "        print(\"reset result dictionary\")\n",
    "        self.result = dict()\n",
    "        self.result[\"train_losses\"] = []\n",
    "        self.result[\"train_accuracyes\"] = []\n",
    "        \n",
    "        self.result[\"test_losses\"] = []\n",
    "        self.result[\"test_accuracyes\"] = []\n",
    "        self.result[\"test_class_acc\"] = []\n",
    "\n",
    "        self.result[\"test_label\"] = torch.Tensor([]).type(torch.LongTensor)\n",
    "        self.result[\"test_y_pred\"] = torch.Tensor([]).type(torch.LongTensor)\n",
    "        \n",
    "    def save_result(self, path):\n",
    "        \"\"\"Save result of acc and class acc\n",
    "        Parameter\n",
    "        --------\n",
    "        path: absolute path for saving\n",
    "        \"\"\"\n",
    "        print(\"saving result to csv\")\n",
    "        \n",
    "    def show_loss(self):\n",
    "        print(\"show loss\")\n",
    "        #loss\n",
    "        data_list = [[x / 100 for x in self.result['train_losses']],\n",
    "                     [x / 100 for x in self.result['test_losses']]]\n",
    "        title = 'Loss Plot'\n",
    "        ylabel = 'Loss'  \n",
    "        tag = ['train','test']\n",
    "        loc=  'best'\n",
    "        xlabel = 'epoch'\n",
    "\n",
    "        for i in range(len(data_list)):\n",
    "            plt.plot(data_list[i])\n",
    "\n",
    "        plt.legend(tag,loc=loc)\n",
    "        plt.title(title)\n",
    "        plt.ylabel(ylabel)\n",
    "        plt.xlabel(xlabel)\n",
    "        plt.show()\n",
    "        \n",
    "    def show_acc(self):\n",
    "        print(\"show acc\")\n",
    "        data_list = [[x / 100 for x in self.result['train_accuracyes']],\n",
    "                     [x / 100 for x in self.result['test_accuracyes']]]\n",
    "        title = 'Accuracy Plot'\n",
    "        ylabel = 'Accuracy'   \n",
    "        tag = ['train','test']\n",
    "        loc=  'best'\n",
    "        xlabel = 'epoch'\n",
    "\n",
    "        for i in range(len(data_list)):\n",
    "            plt.plot(data_list[i])\n",
    "\n",
    "        ylim = [0,1]\n",
    "        plt.legend(tag,loc=loc)\n",
    "        plt.title(title)\n",
    "        plt.ylabel(ylabel)\n",
    "        plt.xlabel(xlabel)\n",
    "        plt.ylim(ylim)\n",
    "        plt.show()\n",
    "        \n",
    "    def show_class_acc(self):\n",
    "        print(\"show class acc\")\n",
    "        \n",
    "        class_acc = dict()\n",
    "        for name in self.NAME_OF_CLASS:\n",
    "            class_acc[name] = []\n",
    "        \n",
    "        class_acc_result = []\n",
    "        \n",
    "        for dic in self.result[\"test_class_acc\"]:\n",
    "            # dictionary for each epoch\n",
    "            for name in self.NAME_OF_CLASS:\n",
    "                class_acc[name].append(dic[name])\n",
    "\n",
    "        # class accuracy\n",
    "        data_list = []\n",
    "        for name in self.NAME_OF_CLASS:\n",
    "            data_list.append(class_acc[name])\n",
    "            \n",
    "        title='Classes Accuracy'\n",
    "        ylabel='Accuracy'\n",
    "        # tag = ['Normal','lgd','hgd','cancer']a\n",
    "        tag = self.NAME_OF_CLASS\n",
    "\n",
    "        loc=  'best'\n",
    "        xlabel = 'epoch'\n",
    "\n",
    "        for i in range(len(data_list)):\n",
    "            plt.plot(data_list[i])\n",
    "\n",
    "        ylim = [0,1]\n",
    "        plt.legend(tag,loc=loc)\n",
    "        plt.title(title)\n",
    "        plt.ylabel(ylabel)\n",
    "        plt.xlabel(xlabel)\n",
    "        plt.ylim(ylim)\n",
    "        plt.show()\n",
    "        \n",
    "    def show_confusion_matrix(self):\n",
    "        print(\"show confusion matrix\")\n",
    "        self.cm = self.showresult.plot_confusion_matrix(self.NAME_OF_CLASS,\n",
    "                                 label=self.result[\"test_label\"], \n",
    "                                 predic=self.result[\"test_y_pred\"])\n",
    "        \n",
    "    def show_roc(self):\n",
    "        print(\"roc result\")\n",
    "        print(self.cm.T)\n",
    "#         cm = self.cm.T\n",
    "        \n",
    "        \n",
    "    \n",
    "    def show_heatmap(self, data_path):\n",
    "        \"\"\"\n",
    "        \n",
    "        \n",
    "        \"\"\"\n",
    "        print(\"show heatmap\")\n",
    "    def count_time(self):\n",
    "        \"\"\"\n",
    "        Calculate time\n",
    "        \n",
    "        \"\"\"\n",
    "        start_t = datetime.datetime.now()\n",
    "\n",
    "# data loading\n",
    "from torch.utils.data import Dataset\n",
    "import torchvision.transforms.functional as FT\n",
    "from torchvision import transforms\n",
    "from yjlib.Data import DataLoader; \n",
    "from yjlib.prep.ImgPrep import ImgPrep \n",
    "from PIL import Image\n",
    "import json\n",
    "import scipy.misc # for saving \n",
    "\n",
    "class EndoDataset(Dataset):\n",
    "    def __init__(self, DATA_PATH, IMAGE_SIZE, split):\n",
    "        dataloader = DataLoader(datatype='img')\n",
    "        self.DATA_PATH = DATA_PATH\n",
    "        self.IMAGE_SIZE = IMAGE_SIZE\n",
    "        \n",
    "        self.imgPrep = ImgPrep() \n",
    "        \n",
    "\n",
    "        self.split = split.upper()\n",
    "        assert self.split in {'TRAIN','VAL', 'TEST'}\n",
    "\n",
    "        # Read data files\n",
    "        with open(os.path.join(DATA_PATH, self.split + '_images.json'), 'r') as j:\n",
    "            self.images = json.load(j) # image data pathes in file\n",
    "\n",
    "        with open(os.path.join(DATA_PATH, self.split + '_labels.json'), 'r') as j:\n",
    "            self.labels = json.load(j) # boxes and labels data pathes in file\n",
    "\n",
    "        assert len(self.images) == len(self.labels) # if do not match number of images with number of boxes and labels.\n",
    "        \n",
    "    def __getitem__(self, i):\n",
    "        \"\"\"getitem\n",
    "        Parameter\n",
    "        ---------\n",
    "        i: number of order data\n",
    "        \n",
    "        PIL(raw_image) -> array -> PIL -> Tensor(prep_image)\n",
    "        \n",
    "        \"\"\"\n",
    "        raw_image = Image.open(self.images[i], mode = 'r') # read PIL Image\n",
    "\n",
    "        # image processing\n",
    "        removed_image = self.imgPrep.remove_pad(np.array(raw_image))# convert PIL to array # remove pad\n",
    "        \n",
    "        # Transform\n",
    "        \n",
    "        \n",
    "        label = self.labels[i]\n",
    "        tensor_label = torch.FloatTensor([label])\n",
    "        \n",
    "        content_transform = transforms.Compose([transforms.Resize(self.IMAGE_SIZE),\n",
    "                                                transforms.ToTensor(), \n",
    "                                                transforms.Normalize([0,0,0],[1,1,1])])\n",
    "        \n",
    "        pil_image = Image.fromarray(removed_image) # Convert array to pil\n",
    "        prep_image = content_transform(pil_image) # transform needs PIL image\n",
    "        \n",
    "        del raw_image, removed_image, pil_image, label\n",
    "        \n",
    "        return prep_image, tensor_label\n",
    "    \n",
    "    \n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.images)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
